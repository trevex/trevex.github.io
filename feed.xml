<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel><title>Nik Voss</title> <description>Just an ordinary blog</description><link>http://nikvoss.com</link> <atom:link href="http://nikvoss.com/feed.xml" rel="self" type="application/rss+xml"/> <item><title>Final crowd simulation artifact</title> <description>&lt;p&gt;After an exhausting week stuffed with submission dates and presentations I was finally able to finish my force field based crowd simulation. For the final submission a video introducing the script/tool is necessary as well, so I wanted to share it to conclude the previous posts. The algorithm works quite well and has especially proven itself to work well for high numbers of individual actors rather than multiple swarms crossing.&lt;/p&gt; &lt;iframe height='300' src='http://www.youtube.com/embed/cjfErm6aB0c?color=white&amp;amp;theme=light' width='600'&gt;&amp;nbsp;&lt;/iframe&gt;</description> <pubDate>Sat, 18 May 2013 00:00:00 +0100</pubDate><link>http://nikvoss.com/2013/05/final-crowd/</link> <guid isPermaLink="true">http://nikvoss.com/2013/05/final-crowd/</guid> </item> <item><title>Force fields for crowd simulation</title> <description>&lt;p&gt;While playing around with Maya I started trying to achieve a form of crowd-simulation without scripting. What I did was simple: Every object in the scene had an invisible sphere attached that was pointy where the object was looking. The sphere itself was an elastic physics body without contact friction.&lt;/p&gt;&lt;p&gt;The final result was a bunch of objects trying to avoid each other but ending up being stuck in each over, but it lead me to an idea how I could implement simple crowd-simulation. If every object similar to a magnetic field has a force field pushing other objects away, they should avoid each other. The result can be even improved by adding in a determination factor, describing how strongly an object is influenced by other objects force fields. The major down-side of this approach is that the work to calculate the force applied on each objects grows with each object by &lt;code&gt;T(n) = O(n*n)&lt;/code&gt;, but this shouldn’t be importent for using it within Maya.&lt;/p&gt;</description> <pubDate>Fri, 26 Apr 2013 00:00:00 +0100</pubDate><link>http://nikvoss.com/2013/04/force-field-crowd/</link> <guid isPermaLink="true">http://nikvoss.com/2013/04/force-field-crowd/</guid> </item> <item><title>Pathfinding in Supreme Commander 2</title> <description>&lt;p&gt;Since I am still working on and researching techniques for crowd simulation I stumbled upon the pathfinding in Supreme Commander 2. Everyone who ever worked with pathfinding probably used or at least knows of a variation of the A*-algorithm. When a few objects move around A* has proven to be a good and fast solution for pathfinding. Unfortunately A* is not reliable when a lot of objects move around.&lt;/p&gt;&lt;p&gt;This problem was researched by the Supreme Commander developers and the University of Washington. The resulting algorithm to allow seamless pathfinding of vast amounts of objects is called Flowfield-Pathfinding. Flowfields represent a grid of velocities indicators, basically directing the units similar to streams influencing plankton in the sea. The downside is that the resulting behaviour of the objects is swarm-like and doesn’t allow high behaviour variety.&lt;/p&gt;&lt;p&gt;The paper on Flowfields in general can be found &lt;a href="http://www.aaai.org/Papers/AIIDE/2008/AIIDE08-031.pdf"&gt;here&lt;/a&gt; and the research by the University of Washington is available &lt;a href="http://grail.cs.washington.edu/projects/crowd-flows/"&gt;here&lt;/a&gt;.&lt;/p&gt;</description> <pubDate>Wed, 27 Mar 2013 00:00:00 +0000</pubDate><link>http://nikvoss.com/2013/03/pathfinding-supreme/</link> <guid isPermaLink="true">http://nikvoss.com/2013/03/pathfinding-supreme/</guid> </item> <item><title>Crowd-Simulation Resources</title> <description>&lt;p&gt;One of my coursework this semester is to develop a crowd-simulation algorithm realised in Maya. The first major problem I encountered is the lack of information on crowd-simulation. I don’t mean there are no research papers on crowd-simulation, but most game-related or programming-related topics are well documented and have lots of examples.&lt;/p&gt;&lt;p&gt;You can simply find a vast amount of information online. Unfortunately this is not the case for crowd-simulation. When looking for any tips how to do crowd-simulation the best bet are research papers. There are very few libraries implementing crowd-simulation, which are neither easy to use nor help understanding what is happening under the hood without crawling through 100.000 lines of source code.&lt;/p&gt;&lt;p&gt;So where to start? The best bet is to actually work through research papers. Although not easily understandable most of them at least give you an idea how about different crowd-simulation models and algorithms and how to abstract and implement them. The best source for papers on crowd-simulation is the &lt;a href="http://gamma.cs.unc.edu/research/crowds/"&gt;GAMMA research group&lt;/a&gt;. They also implemented a &lt;a href="http://gamma.cs.unc.edu/RVO2-UDK/"&gt;library&lt;/a&gt; integrable into the UDK.&lt;/p&gt;</description> <pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><link>http://nikvoss.com/2013/03/crowd-sim-resources/</link> <guid isPermaLink="true">http://nikvoss.com/2013/03/crowd-sim-resources/</guid> </item> <item><title>Implementing ID3DInclude</title> <description>&lt;p&gt;For the procedural methods coursework I am currently working on I wrote a small framework to hide away the DirectX API completely and make it easier to use and simpler to prototype with. The procedural real-time terrain generation is running on the GPU and therefore heavily relying on Shaders.&lt;/p&gt;&lt;p&gt;To keep everything lightweight I wanted to depend on the minimum on dependencies, so mainly DirectX 11 obviously, but also the nice header-only math library GLM. At some point I encountered the problem that the Shaders were getting more complex and therefore I wanted to split the code in multiple files (especially the noise and fractal functions) to make them easier to maintain and reuse. To allow shader files that get compiled on runtime to include files the ID3DInclude-Interface has to be implemented. I stumbled upon a nice article by Adam Sawicki, that helped me a lot. Since his code was depending on his own framework, I thought I share the no-dependencies version of a ID3DInclude-Interface implementation.&lt;/p&gt;&lt;p&gt;Header-file:&lt;/p&gt; &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;CShaderInclude&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='n'&gt;ID3DInclude&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='nl'&gt;public:&lt;/span&gt; &lt;span class='n'&gt;CShaderInclude&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;const&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;shaderDir&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;const&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;systemDir&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;m_ShaderDir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;shaderDir&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='n'&gt;m_SystemDir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;systemDir&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt; &lt;span class='n'&gt;HRESULT&lt;/span&gt; &lt;span class='kr'&gt;__stdcall&lt;/span&gt; &lt;span class='n'&gt;Open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;D3D_INCLUDE_TYPE&lt;/span&gt; &lt;span class='n'&gt;IncludeType&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;LPCSTR&lt;/span&gt; &lt;span class='n'&gt;pFileName&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;LPCVOID&lt;/span&gt; &lt;span class='n'&gt;pParentData&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;LPCVOID&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;ppData&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;UINT&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;pBytes&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='n'&gt;HRESULT&lt;/span&gt; &lt;span class='kr'&gt;__stdcall&lt;/span&gt; &lt;span class='nf'&gt;Close&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;LPCVOID&lt;/span&gt; &lt;span class='n'&gt;pData&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='nl'&gt;private:&lt;/span&gt; &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;string&lt;/span&gt; &lt;span class='n'&gt;m_ShaderDir&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;string&lt;/span&gt; &lt;span class='n'&gt;m_SystemDir&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;};&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Source-file:&lt;/p&gt; &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='k'&gt;const&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;gSystemDir&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;..&lt;/span&gt;&lt;span class='se'&gt;\\&lt;/span&gt;&lt;span class='s'&gt;Shader&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;HRESULT&lt;/span&gt; &lt;span class='kr'&gt;__stdcall&lt;/span&gt; &lt;span class='n'&gt;CShaderInclude&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;Open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;D3D_INCLUDE_TYPE&lt;/span&gt; &lt;span class='n'&gt;IncludeType&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;LPCSTR&lt;/span&gt; &lt;span class='n'&gt;pFileName&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;LPCVOID&lt;/span&gt; &lt;span class='n'&gt;pParentData&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;LPCVOID&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;ppData&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;UINT&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;pBytes&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='n'&gt;try&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;string&lt;/span&gt; &lt;span class='n'&gt;finalPath&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='k'&gt;switch&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;IncludeType&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;D3D_INCLUDE_LOCAL&lt;/span&gt;: &lt;span class='n'&gt;finalPath&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;m_ShaderDir&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\\&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;pFileName&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;D3D_INCLUDE_SYSTEM&lt;/span&gt;: &lt;span class='n'&gt;finalPath&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;m_SystemDir&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\\&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;pFileName&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nl'&gt;default:&lt;/span&gt; &lt;span class='n'&gt;assert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;ifstream&lt;/span&gt; &lt;span class='n'&gt;includeFile&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;finalPath&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;c_str&lt;/span&gt;&lt;span class='p'&gt;(),&lt;/span&gt; &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;ios&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;in&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;ios&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;binary&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;ios&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;ate&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;includeFile&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;is_open&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='kt'&gt;long&lt;/span&gt; &lt;span class='kt'&gt;long&lt;/span&gt; &lt;span class='n'&gt;fileSize&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;includeFile&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;tellg&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;buf&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;fileSize&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='n'&gt;includeFile&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;seekg&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;ios&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;beg&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='n'&gt;includeFile&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;read&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;buf&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;fileSize&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='n'&gt;includeFile&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;ppData&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;buf&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;pBytes&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;fileSize&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;E_FAIL&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;S_OK&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;catch&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;exception&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;E_FAIL&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='n'&gt;HRESULT&lt;/span&gt; &lt;span class='kr'&gt;__stdcall&lt;/span&gt; &lt;span class='n'&gt;CShaderInclude&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;Close&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;LPCVOID&lt;/span&gt; &lt;span class='n'&gt;pData&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;buf&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;pData&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='k'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;buf&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;S_OK&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description> <pubDate>Thu, 07 Mar 2013 00:00:00 +0000</pubDate><link>http://nikvoss.com/2013/03/implementing-id3dinclude/</link> <guid isPermaLink="true">http://nikvoss.com/2013/03/implementing-id3dinclude/</guid> </item> <item><title>Three.js simple grass rendering</title> <description>&lt;p&gt;For my provisional summer project I will need grass, so I started investigating how to deal with grass efficiently in WebGL. This simple approach was a technique I used to render grass in one of my first OpenGL (2.1) programs years ago.&lt;/p&gt;&lt;p&gt;The theory is simple: Loads of instances of the same mesh. The geometry buffers can then be manipulated every frame to make the grass waving. Z-Ordering is avoided for the transparency by using AlphaTests. With batching or proper instancing in OpenGL it was possible to achieve decent performance. Unfortunately this last step is not possible with WebGL therefore the performance is limited, because the vast amount of issued drawing calls. Therefore dealing with the grass within a shader would be a better solution.&lt;/p&gt;&lt;p&gt;Anyway here is a video:&lt;/p&gt; &lt;iframe height='300' src='http://www.youtube.com/embed/rAGeAJ8tyzQ?color=white&amp;amp;theme=light' width='600'&gt;&amp;nbsp;&lt;/iframe&gt; &lt;p&gt;And the &lt;a href="https://dl.dropbox.com/u/43243793/examples/webgl_geometry_grass.html"&gt;demo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If waving grass is not necessary and three.js is used. It is also possible to use billboards along with three.js’s inbuilt particle system. I mocked up a version using this approach &lt;a href="https://dl.dropbox.com/u/43243793/examples/webgl_particles_grass.html"&gt;here&lt;/a&gt;. Unfortunately at least on my machine the resizing of the billboards does not work.&lt;/p&gt;&lt;p&gt;A completely different approach I used last is to completely generate the grass procedurally. Using a few triangles I simply generate each leaf and then merge the complete geometry. This performs reasonably well, but have a look for yourself:&lt;/p&gt; &lt;iframe height='300' src='http://www.youtube.com/embed/RocjbKKg1W4?color=white&amp;amp;theme=light' width='600'&gt;&amp;nbsp;&lt;/iframe&gt; &lt;p&gt;Or try the final &lt;a href="https://dl.dropbox.com/u/43243793/examples/webgl_shader_grass.html"&gt;demo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Overall three.js is quite powerful, but if I have some spare time left I will try to write a completely shader-based version from scratch to see how far this can be pushed within the boundaries of the browser environment.&lt;/p&gt;</description> <pubDate>Sun, 17 Feb 2013 00:00:00 +0000</pubDate><link>http://nikvoss.com/2013/02/threejs-grass-rendering/</link> <guid isPermaLink="true">http://nikvoss.com/2013/02/threejs-grass-rendering/</guid> </item> <item><title>Linux Mint Review!</title> <description>&lt;p&gt;In need of a new UNIX – system on my desktop pc I recently stumbled upon Linux Mint. I previously mostly used Fedora and Ubuntu, but had a bunch of personal problems with Gnome 3 and Unity, since I really liked the simplicity of Gnome 2.&lt;/p&gt;&lt;p&gt;From a design point of view I never really liked Unity and Gnome 3,they tried to do something new, something fresh, but for me that never really felt right. A month ago I therefore tried Linux Mint, which itself is based on Ubuntu and incorporates all the advantages of the widely used Ubuntu – distribution. My first impression of the for Linux Mint 14 heavily advanced Cinnamon – Desktop was very positive. It felt like modernised approach to Gnome 2 (what is exactly the intention behind Cinnamon).&lt;/p&gt; &lt;table class='image'&gt; &lt;caption align='bottom'&gt;&lt;i&gt;Linux Mint 14 using Cinnamon&lt;/i&gt;&lt;/caption&gt; &lt;tr&gt;&lt;td&gt;&lt;img alt='Linux Mint 14 using Cinnamon' src='http://nikvoss.com/img/posts/linux_mint_14.png' /&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;p&gt;The desktop works fluidly and feels stable. Pulling the mouse pointer to the top-left corner exposes all running applications and open workspaces. Actually it is hard to find anything about Linux Mint, that doesn’t perfectly fit or work that well. The only issues I had were a few driver issues, but after some tweaking these were easily resolved. The only problem left is, that the nvidia proprietary driver breaks the TTY, but the problem seems to be connected to compatibility issues between the nvidia driver and the newest linux kernel.&lt;/p&gt;&lt;p&gt;On all platforms I am working on I use google’s Chrome browser. Something that annoyed me was that Chrome’s top bar was light blueish and felt kind of alien to the rest of the interface. There was an easy solution though. Somebody with the same dislike create a theme, that makes the browser perfectly fit in with Cinnamon and the Gnome-Shell. You can find the theme here.&lt;/p&gt;&lt;p&gt;After feeling comfortable with Linux Mint I also installed it on my Macbook Pro. On Ubuntu the MBP’s touchpad was constantly triggering Unity’s build in window move and resize gestures and there was no way except recompiling Ubuntu without a few lines of code to get around this issue properly. Since Linux Mint 14 doesn’t provide any build in gestures. It is your choice to install touch gesture libraries and tools (e.g. TouchEgg). All the tweaks for Ubuntu to fix temperature sensors, fan control et cetera work the same way for Linux Mint as well.&lt;/p&gt;&lt;p&gt;Overall I am very satisfied with Linux Mint. It feels just polished. You have the raw power of the Ubuntu packages at your hand!&lt;/p&gt;</description> <pubDate>Thu, 14 Feb 2013 00:00:00 +0000</pubDate><link>http://nikvoss.com/2013/02/linux-mint/</link> <guid isPermaLink="true">http://nikvoss.com/2013/02/linux-mint/</guid> </item> </channel> </rss>